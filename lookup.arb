def get_command_line_argument
  # ARGV is an array that Ruby defines for us,
  # which contains all the arguments we passed to it
  # when invoking the script from the command line.
  # https://docs.ruby-lang.org/en/2.4.0/ARGF.html
  if ARGV.empty?
    puts "Usage: ruby lookup.rb <domain>"
    exit
  end
  ARGV.first
end

# `domain` contains the domain name we have to look up.
domain = get_command_line_argument

# File.readlines reads a file and returns an
# array of string, where each element is a line
# https://www.rubydoc.info/stdlib/core/IO:readlines

dns_raw = File.readlines("zone")

def parse_dns(dns_raw)
  dns_record = {}
  dns_record[:record_type] = []
  dns_record[:source] = []
  dns_record[:destination] = []
  dns_raw.each do |line|
    next if line.include?("#") or line.strip.empty?
    records = line.split(",")
    dns_record[:record_type] << records[0].strip
    dns_record[:source] << records[1].strip
    dns_record[:destination] << records[2].strip
  end
  dns_record
end

def resolve(dns_records, lookup_chain, domain)
  address_found = false
  dns_records[:source].each_with_index do |value, index|
    if value.strip == domain.strip
      record_type = dns_records[:record_type][index].strip
      address = dns_records[:destination][index].strip
      lookup_chain.push(address.strip)
      if record_type.strip == "A"
        return lookup_chain
      elsif record_type.strip == "CNAME"
        resolve(dns_records, lookup_chain, address)
        return lookup_chain
      else
        lookup_chain = ["Record type " + record_type + " unknown"]
      end
    end
  end
  lookup_chain = ["Error record not found for " + domain]
end

dns_records = parse_dns(dns_raw)
lookup_chain = [domain.strip]
lookup_chain = resolve(dns_records, lookup_chain, domain)
puts lookup_chain.join(" => ")
